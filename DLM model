

####################################################################################################################
######################## Upload data  ##############################################################################
####################################################################################################################

library(zoo)

hour.data <- lapply(Sys.glob("Z:/R/IB_github/data/by_hour_duration_3M/dataIB*.csv"), read.csv)

market.data <- hour.data

dat.zoo.list <- lapply(1:length(market.data), function(i) zoo(market.data[[i]], order.by=as.POSIXct(market.data[[i]]$X))) 
dat.major <- lapply(dat.zoo.list, function(x) subset(x, select=c(EUR.USD.Close,AUD.USD.Close,GBP.USD.Close,USD.JPY.Close,
                                                                 EUR.GBP.Close,EUR.JPY.Close,USD.CAD.Close,USD.CHF.Close)))
week.total <- do.call(rbind, dat.major)

####################################################################################################################
################################### model estim dlm ################################################################
####################################################################################################################

sample.size <- round(nrow(week.total)/3,-1)

# in-sample data 
subData <- window(week.total, start=as.POSIXct(time(week.total)[1]), 
                  end=as.POSIXct(time(week.total)[sample.size]))

# out-of-sample data
subData1 <- window(week.total, start=as.POSIXct(time(week.total)[sample.size]), 
                   end=as.POSIXct(tail(time(week.total),1)))

###############################################################################################################

# choose fx pair

estim.dat <- subData$EUR.GBP.Close
valid.dat <- subData1$EUR.GBP.Close
whole.dat <- week.total$EUR.GBP.Close

###############################################################################################################
############################################ forecast    ######################################################
###############################################################################################################

library(dlm)

dlm.model <- function(x) {
  dlm.poly <- dlmModPoly(order=1, dV=exp(x[1]), dW=exp(x[2]), m0=x[1])
  return(dlm.poly) }

dlm.mle.par <- suppressWarnings(dlmMLE(estim.dat, method="BFGS", rep(0, 2), dlm.model))
dlm.para <- unlist(dlm.model(dlm.mle.par$par)[c("V","W")])
fit.model <- dlm.model(dlm.mle.par$par)
modFilt  <-  dlmFilter(estim.dat, fit.model)

###############################################################################################################

n.ahead.1 <- round(nrow(week.total),-1)   # n step ahead forecast
n.ahead.2 <- round(nrow(week.total)/2,-1) 
n.ahead.3 <- round(nrow(week.total)/3,-1)

num.simul <- 10 # number of simulations 

mForecast1 <- dlmForecast(modFilt, nAhead = n.ahead.1, sampleNew = num.simul)
mForecast2 <- dlmForecast(modFilt, nAhead = n.ahead.2, sampleNew = num.simul)
mForecast3 <- dlmForecast(modFilt, nAhead = n.ahead.3, sampleNew = num.simul)

# plot realized observ. (estim.dat) in-sample data 
plot(window(whole.dat, start=as.POSIXct(start(estim.dat)), end=as.POSIXct(time(whole.dat[length(estim.dat)]))), type = 'o',
     xlim = c(as.POSIXct(start(whole.dat)), as.POSIXct(end(whole.dat))), 
     ylim = c(as.numeric(min(estim.dat))*0.99, as.numeric(max(estim.dat))*1.01), xlab = "Time", ylab = "Price")

# future realized values (out-of-sample dataset) 
future.real <- window(whole.dat, start=as.POSIXct(time(head(valid.dat,1))), end=as.POSIXct(time(tail(valid.dat,1))))
lines(future.real, type = "o", lwd = 1, col="green")

###############################################################################################################

# forecast 1 
sim.future.obs.1 <- lapply(1:length(mForecast1$newStates), function(i) zoo(mForecast1$newStates[[i]], order.by=as.POSIXct(time(head(valid.dat,n.ahead.1)))))
sim.states.1 <- lapply(1:length(mForecast1$newObs), function(i) zoo(mForecast1$newObs[[i]], order.by=as.POSIXct(time(head(valid.dat,n.ahead.1)))))
sim.median.day.1 <- lapply(sim.states.1, function(x) aggregate(x, as.POSIXct(trunc(time(x), "days")), median))

sim.dat.1 <- do.call(cbind, sim.median.day.1); colnames(sim.dat.1) <- paste0("X",1:ncol(sim.dat.1)) # bind list
sim.med.1 <- apply(sim.dat.1,1,median) # calculate median across simulated columns 
med.dat.ts.1 <- read.zoo(data.frame(date=as.POSIXct(names(sim.med.1)), fx=as.numeric(sim.med.1))) # convert to zoo series

expect.future.obs.1 <- zoo(mForecast1$f, order.by=as.POSIXct(time(head(valid.dat,n.ahead.1))))

###############################################################################################################

# forecast 2 
sim.future.obs.2 <- lapply(1:length(mForecast2$newStates), function(i) zoo(mForecast2$newStates[[i]], order.by=as.POSIXct(time(head(valid.dat,n.ahead.2)))))
sim.states.2 <- lapply(1:length(mForecast2$newObs), function(i) zoo(mForecast2$newObs[[i]], order.by=as.POSIXct(time(head(valid.dat,n.ahead.2)))))
sim.median.day.2 <- lapply(sim.states.2, function(x) aggregate(x, as.POSIXct(trunc(time(x), "days")), median))

sim.dat.2 <- do.call(cbind, sim.median.day.2); colnames(sim.dat.2) <- paste0("X",1:ncol(sim.dat.2)) # bind list
sim.med.2 <- apply(sim.dat.2,1,median) # calculate median across simulated columns 
med.dat.ts.2 <- read.zoo(data.frame(date=as.POSIXct(names(sim.med.2)), fx=as.numeric(sim.med.2))) # convert to zoo series

expect.future.obs.2 <- zoo(mForecast2$f, order.by=as.POSIXct(time(head(valid.dat,n.ahead.2))))

###############################################################################################################

# forecast 3 
sim.future.obs.3 <- lapply(1:length(mForecast3$newStates), function(i) zoo(mForecast3$newStates[[i]], order.by=as.POSIXct(time(head(valid.dat,n.ahead.3)))))
sim.states.3 <- lapply(1:length(mForecast3$newObs), function(i) zoo(mForecast3$newObs[[i]], order.by=as.POSIXct(time(head(valid.dat,n.ahead.3)))))
sim.median.day.3 <- lapply(sim.states.3, function(x) aggregate(x, as.POSIXct(trunc(time(x), "days")), median))

sim.dat.3 <- do.call(cbind, sim.median.day.3); colnames(sim.dat.3) <- paste0("X",1:ncol(sim.dat.3)) # bind list
sim.med.3 <- apply(sim.dat.3,1,median) # calculate median across simulated columns 
med.dat.ts.3 <- read.zoo(data.frame(date=as.POSIXct(names(sim.med.3)), fx=as.numeric(sim.med.3))) # convert to zoo series

expect.future.obs.3 <- zoo(mForecast3$f, order.by=as.POSIXct(time(head(valid.dat,n.ahead.3))))

###############################################################################################################
###############################################################################################################

# plot

# invisible(lapply(sim.future.obs.1, function(x) lines(x, col = "grey", type = "o", pch = 4)))
# invisible(lapply(sim.states.1, function(x) lines(x, col = "yellow", type = "o", pch = 1)))
# invisible(lapply(sim.median.day.1, function(x) lines(x, col = "orange", type = "l", pch = 1)))

lines(expect.future.obs.1, type="o", lwd=1, lty=1, col="grey")
lines(med.dat.ts.1, type="o", lwd=2, lty=5, col=4)

###############################################################################################################

lines(expect.future.obs.2, type="o", lwd=1, col="gray")
lines(med.dat.ts.2, type="o", lwd=2, col=5)

###############################################################################################################

lines(expect.future.obs.3, type="o", lwd = 1, col="grey")
lines(med.dat.ts.3, type="o", lwd =2, col=6)

###############################################################################################################
###############################################################################################################
